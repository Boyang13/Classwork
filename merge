#include<stdio.h>
#include <time.h>
#include <unistd.h>
#include <stdlib.h>

//merge sort divides the array into halves and then keeps o dividing until further division isn't possible, then sorts them according to value, combining them
//It is somehwat similar to recursion

void mergesort(int a[], int i, int j); //defines variables for merge
void merge(int a[], int i1, int j1, int i2, int j2); //same variables for above

int main()
{
    time_t begin = time(NULL);
    int a[50000], n, i; //defines the array and loop counters
    printf("Enter number of elements: \n"); //gets number of elements
    scanf("%d", &n);
    printf("Enter array elements: \n");

    for(i = 0; i < n; i++)
    scanf("%d", &a[i]); //gets input into array
    mergesort(a, 0, n - 1); //runs function
    printf("Sorted array: \n");

    for(i = 0; i < n; i++)
    printf("%d, \n", a[i]); //gives output
    time_t end = time(NULL);
    printf("The elapsed time is %ld seconds\n", (end - begin));
    // This program will create same sequence of
    // random numbers on every program run
    FILE* fptr;

    // creating a file "random.txt" in "write" mode
    fptr = fopen("random.txt", "w");
    int b;
    if (fptr == NULL) {
        printf("ERROR");
        exit(1);
    }

    for (b = 0; b < 10000; b++) {

        // to generate number less than 100000
        int val = rand() % 100000;

        // storing data to file
        fprintf(fptr, "%d ", val);
    }

    // closing the file
    fclose(fptr);
    printf("numbers generated successfully !! ");
    return 0;
}

void mergesort(int a[], int i, int j)
{
    int mid;
    if(i < j)
    {
    mid = (i + j) / 2;
    mergesort(a, i, mid); //left recursion
    mergesort(a, mid + 1, j); //right recursion
    merge(a, i, mid, mid + 1, j); //merging of two sorted sub-arrays
    }
}

void merge(int a[], int i1, int j1, int i2, int j2)
{
    int temp[50]; //array used for merging
    int i, j, k;

    i = i1; //beginning of the first list
    j = i2; //beginning of the second list
    k = 0;
    while(i <= j1 && j <= j2) //while elements in both lists
    {
        if(a[i] < a[j])
        temp[k++] = a[i++];
        else
        temp[k++] = a[j++];
    }
    while(i <= j1) //copy remaining elements of the first list
    temp[k++] = a[i++];

    while(j <= j2) //copy remaining elements of the second list
    temp[k++] = a[j++];

    //Transfer elements from temp[] back to a[]
    for(i = i1, j = 0;i <= j2; i++, j++)
    a[i] = temp[j];
}
